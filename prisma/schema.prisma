generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Сущность пользователя
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  cards     Card[]   @relation("UserCards")
  comments  Comment[] @relation("UserComments")
  usersWithBoards UsersWithBoards[] @relation("UserByBoard")

  @@map("users")
}

// Сущность доски
model Board {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  columns   Column[] @relation("BoardColumns")
  usersWithBoards UsersWithBoards[] @relation("BoardByUser")

  @@map("boards")
}

model UsersWithBoards {
  userId    String   @map("user_id")
  isCreator Boolean  @map("is_creator")
  boardId   String   @map("board_id")

  user      User     @relation("UserByBoard", fields: [userId], references: [id], onDelete: Cascade)
  board     Board    @relation("BoardByUser", fields: [boardId], references: [id], onDelete: Cascade)

  @@id([userId, boardId])
  @@map("user_with_boards")
}

// Сущность колонны
model Column {
  id        String   @id @default(cuid())
  name      String
  boardId   String   @map("board_id")
  position  Int
  createdAt DateTime @default(now()) @map("created_at")

  board     Board    @relation("BoardColumns", fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]   @relation("ColumnCards")

  @@map("columns")
}

// Сущность карточки
model Card {
  id        String   @id @default(cuid())
  title     String
  description String?
  columnId  String   @map("column_id")
  position  Int
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  column    Column   @relation("ColumnCards", fields: [columnId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCards", fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[] @relation("CardComments")

  @@map("cards")
}

// Сущность комментария
model Comment {
  id        String   @id @default(cuid())
  text      String
  cardId    String   @map("card_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  card      Card     @relation("CardComments", fields: [cardId], references: [id], onDelete: Cascade)
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}